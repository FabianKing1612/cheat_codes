/*php cheat-sheet*/

>PHP wird genutzt, um eine Seite um dynamische Inhalte auf der
Serverseite zu ergänzen, beispielsweise zum Laden von Benutzerdaten
aus einer Datenbank.

>PHP ist eine serverseitige Scriptsprache, das heißt, damit man
PHP Programme bzw. die PHP-Scripts ausführen kann, benötigt man
einen Webserver.

>PHP an sich ist eine typlose Programmiersprache, d.h. PHP ermittelt
selbst welchen Typ (Text, Zahl usw.) der Wert hat und legt diesen
entsprechend für die Variable fest. Ihr als Programmierer müsst euch
darum nicht kümmern.

>Variablen  können Werte jeder Art enthalten, beispielsweise
einfach Zeilen oder Texte, aber auch komplexere Strukturen wie
Beispielsweise Listen oder gar Bilder.

Allgemein:
1. (Allg,)
<?php                     - Beginn des Php-Scripts
echo "<b>Hello World</b>";   - gibt bestimmten Text aus ; <b>Text</b> = fettgedruckt
?>                        - Ende des Php-Scripts

2. (Kennzeichnungen)
"Anführungsz. innerhalb" - muss mit \"Text\" gekennzeichnet werden
\ = Backslash - einfügen mit einem zweiten \

4. (Kommentare)
//Text oder #Text - Kommentare (Inhalt einer Zeile überspringen)
/*Text*/ - mehrspaltige Kommentare

5.(Variablen)
$ - Variablenbeginn
Variable beginnt mit $ + Name + = + "Text" + ;
<?php
$name = "Nils Reimers";
?>
Bsp.:
<?php
$name = "Nils Reimers";
echo "Mein Name ist $name";
?>
Ausgabe: Mein Name ist Nils Reimers
Bsp:
<?php
$name = "Nils ";
$name .= "Reimers"; -> Variable anhängen
echo $name;
?>
Ausgabe: Nils Reimers
Bsp.:
<?php
$farbe = "rotes";
$text = "Wir haben ein ".$farbe." Haus";
echo $text;
?>
Ausgabe: Wir  haben ein rotes Haus

6. (Variablentypen)
integer: Eine Integer-Variable enthält nur Ganzzahlen, d.h. Zahlen ohne Komma
string: Dies ist eine Variable, die einen Text/Satz/Wort enthält
float: Eine Fließkommazahl, d.h. eine Zahl mit Komma
double: In PHP das gleiche wie float
bool: Dies sind die Werte true und false
Bsp.:
<?php
$integer = 15; //Eine Integer Variable
$string = "Ganz viel Text"; //Ein String
$float = 15.5; //Eine Zahl mit einem Komma
$bool = true;
?>

7. (Zahl-Variablen)
Bsp.:
<?php
$zahl1 = 10;
$zahl2 = 5;
echo "Zahl1: $zahl1 <br />";
echo "Zahl2: $zahl2";
?>

7.(Rechnen mit Variablen)
Bsp.:
<?php
$zahl1 = 10;
$zahl2 = 5;
echo $zahl1 + $zahl2; //addieren
echo "<br />";
echo $zahl1 - $zahl2; //subtrahieren
echo "<br />";
echo $zahl1 * $zahl2; //multiplizieren
echo "<br />";
echo $zahl1 / $zahl2; //dividieren
echo "<br />";
echo pow($zahl1,$zahl2); //Zahl1 hoch Zahl2 (10^5)
echo "<br />";
echo sqrt(64); // Wurzel von 64
echo "<br />";
echo 2*$zahl1 + 5*$zahl2 - 3; //Berechnet 2*10 + 5*5 - 3
?>

8.(PHP Werte übertragen)
Bspw,: zum Eintragen einer Benutzereingabe eines Formulars in
das Script zur Überprüfung und Abspeicherung

8.1($_GET-Methode)
>Variablewerte, die mittels URL übergeben werden -> ? innerhalb der URL
Bsp.:
<?php
$vorname = $_GET['vorname'];
$nachname = $_GET['nachname'];
$mittelname = §_GET['mittelname'];
echo "Hallo $vorname $nachname";
?>
GET-Parameter: get.php?vorname=Max&mittelname=Hans&nachname=Meier
-> & - Trennung von GET-Variablen

8.2($_POST-Methode)
>Variablewerte werden per Formular übertragen (HTML)
Bsp.:
<form action="seite2.php" method="post">
Vorname: <input type="text" name="vorname" /><br />
Nachname: <input type="text" name="nachname" /><br />
<input type="Submit" value="Absenden" />
</form>

9.(if-Anweisungen)
>Mit if können wir überprüfen, ob bestimmte Bedingungen
erfüllt bzw. nicht erfüllt sind
Bsp.:
<?php
if(Bedingung)
   {
   Anweisung
   }
?>
//Also:
<?php
$user = "Nils";

if($user == "Nils")            -> Wenn $user Nils
   {
   echo "Hallo Nils";          -> dann "..." ausgeben
   }
else                           -> falls $User nicht Nils
   {
   echo "Du bist nicht Nils!"; -> dann "..." ausgeben
   }
?>
//Oder:
<?php
$user = "Nils";

if($user=="Nils")
   {
   echo "Hallo Nils";
   }
else
   {
   if($user=="Reimers")
      {
      echo "Hallo Herr Reimers";
      }
   else
      {
      echo "Du bist nicht Nils Reimers";
      }
   }
?>
//Oder2:
<?php
$user = "Nils";

if($user=="Nils")
   {
   echo "Hallo Nils";
   }
else if($user == "Reimers")
   {
   echo "Hallo Herr Reimers";
   }
else if($user == "Meier")
   {
   echo "Hallo Herr Meier";
   }
else
   {
   echo "Du bist weder Herr Reimers noch Herr Meier";
   }
?>
//Man kann auch mit einer if-Anweisung abfragen,ob etwas nicht erfüllt ist.
-> != (ungleich).
Bsp.:
<?php
$user = "Nils";

if($user != "Nils")
   {
   echo "Du bist nicht Nils";
   }
else
   {
   echo "Hallo Nils";
   }
?>
Überprüfen:
<?php
$user = $_POST["user"];

if($user!="")   -> Wenn das feld $User nicht leer ist ("")
   {
   echo "Herzlich Willkommen $user";   -> dann "..."
   }
else       -> ist aber doch ohne Wert
   {
   echo "Das Feld User wurde nicht ausgefüllt"; -> dann "..."
   }
?>

10.(Vergleichsoperatoren)
>Vergleichsoperatoren in PHP erlauben es, Werte und Variablen
zu vergleichen. So kann mit diesen Überprüft werden, ob eine
Variable beispielsweise eine bestimmten Wert besitzt







Codes:
<br /> - erzeugt einen break (zeilenumbruch in der HTML-Ausgabe
\n - erzeugt einen break (zeilenumbruch in der Php-Ausgabe
echo - dynamische(z.B. aus einer Datenbank) Textausgabe
echo sqrt(64); - Wurzel von 64
echo pow($zahl1,$zahl2); - Zahl1 hoch Zahl2 (10^5)
$name = "Text"; - Text-Variable
$zahl = 10; - Zahl-variable (keine Anführungszeichen)
$ergebnis = $zahl1 + $zahl2; - Addition von Variablen
$_GET - Variablewerte werden per URL übertragen
$_POST - Variablewerte werden per Formular übertragen
$a == $b -> Gleich = Dieser Vergleich ist erfüllt, falls
            $a und $b den selben Wert beinhaltet.
            Sind die Typen der Variablen verschieden, so
            werden die konvertiert.
$a === $b -> Identisch = Dieser Vergleich ist erfüllt, falls
             $a und $b den selben Typ und den Inhalt besitzen.
             Wäre ein Wert vom Typ int und der andere from Typ
             String, so würde false zurück gegeben werden.
$a != $b -> Ungleich = Dieser Vergleich ist erfüllt, falls $a
            und $b nicht den selben Wert beinhaltet. Sind die
            Typen der Variablen verschieden, so werden die konvertiert.
$a !== $b -> Nicht identisch = Dieser Vergleich ist erfüllt,
             falls $a und $b einen unterschiedlichen Typ haben
             oder einen unterschiedlichen Wert.
$a < $b -> Kleiner = $a muss kleiner als $b sein.
$a <= $b -> Kleiner Gleich = $a muss kleiner oder gleich $b sein.
$a > $b -> Größer = $a muss größer als $b sein.
$a >= $b -> Größer Gleich = $a muss größer oder gleich $b sein.